# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zfGV9_wYmv2lNLCQy73E_USY7p31pEas
"""

# AI-Based Ration Shop Availability & Mapping - Demo Notebook

import pandas as pd
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("ration_shop_data.csv")
print("Dataset Preview:")
print(df.head())

# Basic analysis - Remaining stock per shop
shop_stock = df.groupby("Shop")["Remaining"].mean()
print("\nAverage Remaining Stock per Shop:")
print(shop_stock)

# Plot stock trend for Shop_A
shop_a = df[df["Shop"]=="Shop_A"].groupby("Date")["Remaining"].sum()

plt.figure(figsize=(10,5))
plt.plot(shop_a.index, shop_a.values, marker="o", color="blue")
plt.title("Shop_A Remaining Stock Over Time")
plt.xlabel("Date")
plt.ylabel("Remaining Stock")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Shortage prediction rule (simple threshold)
df["Shortage_Flag"] = df["Remaining"].apply(lambda x: "Yes" if x < 100 else "No")
print("\nShortage Alerts (first 10 rows):")
print(df[["Date","Shop","Item","Remaining","Shortage_Flag"]].head(10))

pip install pandas matplotlib scikit-learn

# AI-Based Ration Shop Availability & Mapping - Demo Notebook with ML

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

# Load dataset
df = pd.read_csv("ration_shop_data.csv")
print("Dataset Preview:")
print(df.head())

# ------------------------------
# 1. Basic Analysis
# ------------------------------
# Average remaining stock per shop
shop_stock = df.groupby("Shop")["Remaining"].mean()
print("\nAverage Remaining Stock per Shop:")
print(shop_stock)

# Stock trend for Shop_A
shop_a = df[df["Shop"]=="Shop_A"].groupby("Date")["Remaining"].sum()

plt.figure(figsize=(10,5))
plt.plot(shop_a.index, shop_a.values, marker="o", color="blue")
plt.title("Shop_A Remaining Stock Over Time")
plt.xlabel("Date")
plt.ylabel("Remaining Stock")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ------------------------------
# 2. Rule-Based Shortage Alerts
# ------------------------------
df["Shortage_Flag"] = df["Remaining"].apply(lambda x: "Yes" if x < 100 else "No")
print("\nShortage Alerts (first 10 rows):")
print(df[["Date","Shop","Item","Remaining","Shortage_Flag"]].head(10))

# ------------------------------
# 3. AI Model: Predict Future Stock (Linear Regression)
# ------------------------------
print("\n--- AI Prediction for Shop_A ---")

# Prepare dataset for ML
shop_a = df[df["Shop"]=="Shop_A"].groupby("Date")["Remaining"].sum().reset_index()
shop_a["Day"] = np.arange(len(shop_a))  # numeric days

X = shop_a[["Day"]]   # input feature (time)
y = shop_a["Remaining"]  # target (stock)

# Train model
model = LinearRegression()
model.fit(X, y)

# Predict for next 7 days
future_days = np.arange(len(shop_a), len(shop_a)+7).reshape(-1,1)
future_preds = model.predict(future_days)

print("Predicted Stock for Next 7 Days:")
for i, val in enumerate(future_preds, 1):
    print(f"Day +{i}: {val:.2f}")

# Plot prediction
plt.figure(figsize=(10,5))
plt.plot(shop_a["Day"], y, marker="o", label="Actual Stock")
plt.plot(future_days, future_preds, marker="x", linestyle="--", color="red", label="Predicted Future Stock")
plt.title("AI Prediction of Shop_A Stock")
plt.xlabel("Day")
plt.ylabel("Stock Remaining")
plt.legend()
plt.show()

# AI-Based Ration Shop Availability & Mapping - Demo Notebook with ML

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

# ------------------------------
# 0. Load Dataset
# ------------------------------
df = pd.read_csv("ration_shop_data.csv")
print("Dataset Preview:")
print(df.head())

# ------------------------------
# 1. Basic Analysis
# ------------------------------
# Average remaining stock per shop
shop_stock = df.groupby("Shop")["Remaining"].mean()
print("\nAverage Remaining Stock per Shop:")
print(shop_stock)

# Stock trend for Shop_A
shop_a = df[df["Shop"] == "Shop_A"].groupby("Date")["Remaining"].sum()

plt.figure(figsize=(10, 5))
plt.plot(shop_a.index, shop_a.values, marker="o", color="blue")
plt.title("Shop_A Remaining Stock Over Time")
plt.xlabel("Date")
plt.ylabel("Remaining Stock")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ------------------------------
# 2. Rule-Based Shortage Alerts
# ------------------------------
df["Shortage_Flag"] = df["Remaining"].apply(lambda x: "Yes" if x < 100 else "No")
print("\nShortage Alerts (first 10 rows):")
print(df[["Date", "Shop", "Item", "Remaining", "Shortage_Flag"]].head(10))

# ------------------------------
# 3. AI Model: Predict Future Stock (Linear Regression)
# ------------------------------
print("\n--- AI Prediction for Shop_A ---")

# Prepare dataset for ML
shop_a_df = df[df["Shop"] == "Shop_A"].groupby("Date")["Remaining"].sum().reset_index()
shop_a_df["Day"] = np.arange(len(shop_a_df))  # numeric days

X = shop_a_df[["Day"]]       # input feature (time)
y = shop_a_df["Remaining"]   # target (stock)

# Train model
model = LinearRegression()
model.fit(X, y)

# Predict for next 7 days (using DataFrame to avoid warnings)
future_days = pd.DataFrame({"Day": np.arange(len(shop_a_df), len(shop_a_df) + 7)})
future_preds = model.predict(future_days)

print("Predicted Stock for Next 7 Days:")
for i, val in enumerate(future_preds, 1):
    print(f"Day +{i}: {val:.2f}")

# Plot prediction
plt.figure(figsize=(10, 5))
plt.plot(shop_a_df["Day"], y, marker="o", label="Actual Stock")
plt.plot(future_days["Day"], future_preds, marker="x", linestyle="--", color="red", label="Predicted Future Stock")
plt.title("AI Prediction of Shop_A Stock")
plt.xlabel("Day")
plt.ylabel("Stock Remaining")
plt.legend()
plt.tight_layout()
plt.show()

# AI-Based Ration Shop Availability & Mapping - Demo Notebook with ML

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

# ------------------------------
# 0. Load Dataset
# ------------------------------
df = pd.read_csv("ration_shop_data.csv")
print("Dataset Preview:")
print(df.head())

# ------------------------------
# 1. Basic Analysis
# ------------------------------
# Average remaining stock per shop
shop_stock = df.groupby("Shop")["Remaining"].mean()
print("\nAverage Remaining Stock per Shop:")
print(shop_stock)

# Stock trend example for Shop_A
shop_a = df[df["Shop"] == "Shop_A"].groupby("Date")["Remaining"].sum()
plt.figure(figsize=(10, 5))
plt.plot(shop_a.index, shop_a.values, marker="o", color="blue")
plt.title("Shop_A Remaining Stock Over Time")
plt.xlabel("Date")
plt.ylabel("Remaining Stock")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ------------------------------
# 2. Rule-Based Shortage Alerts
# ------------------------------
df["Shortage_Flag"] = df["Remaining"].apply(lambda x: "Yes" if x < 100 else "No")
print("\nShortage Alerts (first 10 rows):")
print(df[["Date", "Shop", "Item", "Remaining", "Shortage_Flag"]].head(10))

# ------------------------------
# 3. AI Model: Predict Future Stock (Linear Regression)
# ------------------------------
print("\n--- AI Prediction for All Shops ---")

shops = df["Shop"].unique()
future_predictions = {}

for shop in shops:
    print(f"\n📌 Predictions for {shop}:")
    shop_df = df[df["Shop"] == shop].groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))  # numeric days

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    # Train ML model
    model = LinearRegression()
    model.fit(X, y)

    # Predict for next 7 days
    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + 7)})
    future_preds = model.predict(future_days)
    future_predictions[shop] = future_preds

    # Print results
    for i, val in enumerate(future_preds, 1):
        print(f"Day +{i}: {val:.2f}")

    # Plot actual vs predicted
    plt.figure(figsize=(10, 5))
    plt.plot(shop_df["Day"], y, marker="o", label="Actual Stock")
    plt.plot(future_days["Day"], future_preds, marker="x", linestyle="--", color="red", label="Predicted Future Stock")
    plt.title(f"AI Prediction of {shop} Stock")
    plt.xlabel("Day")
    plt.ylabel("Stock Remaining")
    plt.legend()
    plt.tight_layout()
    plt.show()

# ------------------------------
# 4. Summary of Predictions
# ------------------------------
print("\n📊 Summary of Predicted Stock Levels (Next 7 Days):")
for shop, preds in future_predictions.items():
    print(f"\n{shop}: {[round(p,2) for p in preds]}")

# AI-Based Ration Shop Availability & Mapping - Demo Notebook with ML + Dashboard

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

# ------------------------------
# 0. Load Dataset
# ------------------------------
df = pd.read_csv("ration_shop_data.csv")
print("Dataset Preview:")
print(df.head())

# ------------------------------
# 1. Basic Analysis
# ------------------------------
shop_stock = df.groupby("Shop")["Remaining"].mean()
print("\nAverage Remaining Stock per Shop:")
print(shop_stock)

# ------------------------------
# 2. Rule-Based Shortage Alerts
# ------------------------------
df["Shortage_Flag"] = df["Remaining"].apply(lambda x: "Yes" if x < 100 else "No")
print("\nShortage Alerts (first 10 rows):")
print(df[["Date", "Shop", "Item", "Remaining", "Shortage_Flag"]].head(10))

# ------------------------------
# 3. AI Model: Predict Future Stock (Linear Regression)
# ------------------------------
print("\n--- AI Prediction for All Shops ---")

shops = df["Shop"].unique()
future_predictions = {}

for shop in shops:
    print(f"\n📌 Predictions for {shop}:")
    shop_df = df[df["Shop"] == shop].groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    model = LinearRegression()
    model.fit(X, y)

    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + 7)})
    future_preds = model.predict(future_days)
    future_predictions[shop] = future_preds

    for i, val in enumerate(future_preds, 1):
        print(f"Day +{i}: {val:.2f}")

# ------------------------------
# 4. Combined Dashboard (Grafana-style)
# ------------------------------
print("\n📊 Generating Combined Dashboard...")

num_shops = len(shops)
cols = 2
rows = (num_shops + 1) // cols

fig, axes = plt.subplots(rows, cols, figsize=(14, 5 * rows), sharex=False)
axes = axes.flatten()

for i, shop in enumerate(shops):
    shop_df = df[df["Shop"] == shop].groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    model = LinearRegression()
    model.fit(X, y)
    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + 7)})
    future_preds = model.predict(future_days)

    ax = axes[i]
    ax.plot(shop_df["Day"], y, marker="o", label="Actual Stock")
    ax.plot(future_days["Day"], future_preds, marker="x", linestyle="--", color="red", label="Predicted Stock")
    ax.set_title(f"{shop} Stock Forecast")
    ax.set_xlabel("Day")
    ax.set_ylabel("Stock Remaining")
    ax.legend()

# Remove empty subplots if shops < grid
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

# ------------------------------
# 5. Summary Table
# ------------------------------
print("\n📊 Summary of Predicted Stock Levels (Next 7 Days):")
for shop, preds in future_predictions.items():
    print(f"\n{shop}: {[round(p,2) for p in preds]}")

# AI-Based Ration Shop Availability & Mapping - Demo Notebook with ML + Dashboard + CSV Export

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

# ------------------------------
# 0. Load Dataset
# ------------------------------
df = pd.read_csv("ration_shop_data.csv")
print("Dataset Preview:")
print(df.head())

# ------------------------------
# 1. Basic Analysis
# ------------------------------
shop_stock = df.groupby("Shop")["Remaining"].mean()
print("\nAverage Remaining Stock per Shop:")
print(shop_stock)

# ------------------------------
# 2. Rule-Based Shortage Alerts
# ------------------------------
df["Shortage_Flag"] = df["Remaining"].apply(lambda x: "Yes" if x < 100 else "No")
print("\nShortage Alerts (first 10 rows):")
print(df[["Date", "Shop", "Item", "Remaining", "Shortage_Flag"]].head(10))

# ------------------------------
# 3. AI Model: Predict Future Stock (Linear Regression)
# ------------------------------
print("\n--- AI Prediction for All Shops ---")

shops = df["Shop"].unique()
future_predictions = {}
pred_table = []   # for saving CSV

for shop in shops:
    print(f"\n📌 Predictions for {shop}:")
    shop_df = df[df["Shop"] == shop].groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    model = LinearRegression()
    model.fit(X, y)

    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + 7)})
    future_preds = model.predict(future_days)
    future_predictions[shop] = future_preds

    for i, val in enumerate(future_preds, 1):
        print(f"Day +{i}: {val:.2f}")
        pred_table.append([shop, f"Day+{i}", round(val,2)])

# ------------------------------
# 4. Combined Dashboard (Grafana-style)
# ------------------------------
print("\n📊 Generating Combined Dashboard...")

num_shops = len(shops)
cols = 2
rows = (num_shops + 1) // cols

fig, axes = plt.subplots(rows, cols, figsize=(14, 5 * rows), sharex=False)
axes = axes.flatten()

for i, shop in enumerate(shops):
    shop_df = df[df["Shop"] == shop].groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    model = LinearRegression()
    model.fit(X, y)
    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + 7)})
    future_preds = model.predict(future_days)

    ax = axes[i]
    ax.plot(shop_df["Day"], y, marker="o", label="Actual Stock")
    ax.plot(future_days["Day"], future_preds, marker="x", linestyle="--", color="red", label="Predicted Stock")
    ax.set_title(f"{shop} Stock Forecast")
    ax.set_xlabel("Day")
    ax.set_ylabel("Stock Remaining")
    ax.legend()

# Remove empty subplots if shops < grid
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.show()

# ------------------------------
# 5. Export Predictions to CSV
# ------------------------------
pred_df = pd.DataFrame(pred_table, columns=["Shop", "Day", "Predicted_Stock"])
pred_df.to_csv("predicted_stock.csv", index=False)

print("\n✅ Predictions exported to 'predicted_stock.csv'")
print(pred_df.head(15))  # preview

# AI-Based Ration Shop Availability & Mapping - Demo Notebook with ML + Live Simulation

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np
import time
from IPython.display import clear_output

# ------------------------------
# 0. Load Dataset
# ------------------------------
df = pd.read_csv("ration_shop_data.csv")
print("Dataset Preview:")
print(df.head())

# ------------------------------
# 1. Basic Analysis
# ------------------------------
shop_stock = df.groupby("Shop")["Remaining"].mean()
print("\nAverage Remaining Stock per Shop:")
print(shop_stock)

# ------------------------------
# 2. Rule-Based Shortage Alerts
# ------------------------------
df["Shortage_Flag"] = df["Remaining"].apply(lambda x: "Yes" if x < 100 else "No")
print("\nShortage Alerts (first 10 rows):")
print(df[["Date", "Shop", "Item", "Remaining", "Shortage_Flag"]].head(10))

# ------------------------------
# 3. AI Prediction Function (Reusable)
# ------------------------------
def predict_stock(shop_df, days_ahead=7):
    shop_df = shop_df.groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    model = LinearRegression()
    model.fit(X, y)

    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + days_ahead)})
    future_preds = model.predict(future_days)

    return shop_df, future_days, future_preds

# ------------------------------
# 4. Live Simulation (like Grafana refresh)
# ------------------------------
shops = df["Shop"].unique()
print("\n🔄 Starting Live Dashboard Simulation...")

for step in range(5):  # refresh 5 times for demo
    clear_output(wait=True)
    print(f"📡 Live Dashboard Update {step+1}")

    num_shops = len(shops)
    cols = 2
    rows = (num_shops + 1) // cols

    fig, axes = plt.subplots(rows, cols, figsize=(14, 5 * rows), sharex=False)
    axes = axes.flatten()

    for i, shop in enumerate(shops):
        shop_df = df[df["Shop"] == shop]
        shop_df, future_days, future_preds = predict_stock(shop_df)

        ax = axes[i]
        ax.plot(shop_df["Day"], shop_df["Remaining"], marker="o", label="Actual Stock")
        ax.plot(future_days["Day"], future_preds, marker="x", linestyle="--", color="red", label="Predicted Stock")
        ax.set_title(f"{shop} Stock Forecast")
        ax.set_xlabel("Day")
        ax.set_ylabel("Stock Remaining")
        ax.legend()

    for j in range(i + 1, len(axes)):
        fig.delaxes(axes[j])

    plt.tight_layout()
    plt.show()

    # Fake live-update delay
    time.sleep(3)

print("\n✅ Live Simulation Finished!")

# AI-Based Ration Shop Availability & Mapping - Demo Notebook with ML + Live Simulation + Logging

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np
import time
from IPython.display import clear_output
import datetime

# ------------------------------
# 0. Load Dataset
# ------------------------------
df = pd.read_csv("ration_shop_data.csv")
print("Dataset Preview:")
print(df.head())

# ------------------------------
# 1. Basic Analysis
# ------------------------------
shop_stock = df.groupby("Shop")["Remaining"].mean()
print("\nAverage Remaining Stock per Shop:")
print(shop_stock)

# ------------------------------
# 2. Rule-Based Shortage Alerts
# ------------------------------
df["Shortage_Flag"] = df["Remaining"].apply(lambda x: "Yes" if x < 100 else "No")
print("\nShortage Alerts (first 10 rows):")
print(df[["Date", "Shop", "Item", "Remaining", "Shortage_Flag"]].head(10))

# ------------------------------
# 3. AI Prediction Function
# ------------------------------
def predict_stock(shop_df, days_ahead=7):
    shop_df = shop_df.groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    model = LinearRegression()
    model.fit(X, y)

    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + days_ahead)})
    future_preds = model.predict(future_days)

    return shop_df, future_days, future_preds

# ------------------------------
# 4. Setup Log File
# ------------------------------
log_file = "prediction_logs.csv"

# Create log file with header (overwrite if rerun)
with open(log_file, "w") as f:
    f.write("Timestamp,Shop,DayAhead,PredictedStock\n")

# ------------------------------
# 5. Live Simulation + Logging
# ------------------------------
shops = df["Shop"].unique()
print("\n🔄 Starting Live Dashboard Simulation with Logging...")

for step in range(5):  # simulate 5 refreshes
    clear_output(wait=True)
    print(f"📡 Live Dashboard Update {step+1}")

    num_shops = len(shops)
    cols = 2
    rows = (num_shops + 1) // cols

    fig, axes = plt.subplots(rows, cols, figsize=(14, 5 * rows), sharex=False)
    axes = axes.flatten()

    # Current timestamp for logging
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    for i, shop in enumerate(shops):
        shop_df = df[df["Shop"] == shop]
        shop_df, future_days, future_preds = predict_stock(shop_df)

        # Plotting
        ax = axes[i]
        ax.plot(shop_df["Day"], shop_df["Remaining"], marker="o", label="Actual Stock")
        ax.plot(future_days["Day"], future_preds, marker="x", linestyle="--", color="red", label="Predicted Stock")
        ax.set_title(f"{shop} Stock Forecast")
        ax.set_xlabel("Day")
        ax.set_ylabel("Stock Remaining")
        ax.legend()

        # Logging predictions
        with open(log_file, "a") as f:
            for d, p in enumerate(future_preds, 1):
                f.write(f"{now},{shop},+{d},{p:.2f}\n")

    for j in range(i + 1, len(axes)):
        fig.delaxes(axes[j])

    plt.tight_layout()
    plt.show()

    time.sleep(3)  # simulate auto-refresh delay

print("\n✅ Live Simulation Finished! Logs saved to 'prediction_logs.csv'")

# AI-Based Ration Shop Availability & Mapping - Demo Notebook with ML + Live Simulation + Logging + Shortages

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np
import time
from IPython.display import clear_output
import datetime
import random

# ------------------------------
# 0. Load Dataset
# ------------------------------
df = pd.read_csv("ration_shop_data.csv")
print("Dataset Preview:")
print(df.head())

# ------------------------------
# 1. Basic Analysis
# ------------------------------
shop_stock = df.groupby("Shop")["Remaining"].mean()
print("\nAverage Remaining Stock per Shop:")
print(shop_stock)

# ------------------------------
# 2. Rule-Based Shortage Alerts
# ------------------------------
df["Shortage_Flag"] = df["Remaining"].apply(lambda x: "Yes" if x < 100 else "No")
print("\nShortage Alerts (first 10 rows):")
print(df[["Date", "Shop", "Item", "Remaining", "Shortage_Flag"]].head(10))

# ------------------------------
# 3. AI Prediction Function
# ------------------------------
def predict_stock(shop_df, days_ahead=7):
    shop_df = shop_df.groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    model = LinearRegression()
    model.fit(X, y)

    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + days_ahead)})
    future_preds = model.predict(future_days)

    return shop_df, future_days, future_preds

# ------------------------------
# 4. Setup Log File
# ------------------------------
log_file = "prediction_logs.csv"
with open(log_file, "w") as f:
    f.write("Timestamp,Shop,DayAhead,PredictedStock,Note\n")

# ------------------------------
# 5. Live Simulation with Random Shortages
# ------------------------------
shops = df["Shop"].unique()
print("\n🔄 Starting Live Dashboard Simulation with Logging & Shortages...")

for step in range(5):  # simulate 5 refreshes
    clear_output(wait=True)
    print(f"📡 Live Dashboard Update {step+1}")

    num_shops = len(shops)
    cols = 2
    rows = (num_shops + 1) // cols

    fig, axes = plt.subplots(rows, cols, figsize=(14, 5 * rows), sharex=False)
    axes = axes.flatten()

    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    for i, shop in enumerate(shops):
        shop_df = df[df["Shop"] == shop].copy()

        # 🔥 Inject sudden random stock drop (simulate shortage)
        if random.random() < 0.3:  # 30% chance
            drop_amount = random.randint(50, 200)
            affected_idx = shop_df.sample(1).index
            shop_df.loc[affected_idx, "Remaining"] = shop_df.loc[affected_idx, "Remaining"] - drop_amount
            shop_df.loc[affected_idx, "Remaining"] = shop_df.loc[affected_idx, "Remaining"].clip(lower=0)
            shortage_note = f"⚠️ Sudden shortage (-{drop_amount})"
        else:
            shortage_note = "Normal"

        # Prediction
        shop_df, future_days, future_preds = predict_stock(shop_df)

        # Plotting
        ax = axes[i]
        ax.plot(shop_df["Day"], shop_df["Remaining"], marker="o", label="Actual Stock")
        ax.plot(future_days["Day"], future_preds, marker="x", linestyle="--", color="red", label="Predicted Stock")
        ax.set_title(f"{shop} Stock Forecast")
        ax.set_xlabel("Day")
        ax.set_ylabel("Stock Remaining")
        ax.legend()

        # Logging predictions
        with open(log_file, "a") as f:
            for d, p in enumerate(future_preds, 1):
                f.write(f"{now},{shop},+{d},{p:.2f},{shortage_note}\n")

    for j in range(i + 1, len(axes)):
        fig.delaxes(axes[j])

    plt.tight_layout()
    plt.show()

    time.sleep(3)

print("\n✅ Live Simulation Finished! Logs saved to 'prediction_logs.csv'")

# AI Ration Shop System with Live Simulation + Logging + Auto PDF Report

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np
import time, datetime, random, os
from IPython.display import clear_output
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

# ------------------------------
# Load Dataset
# ------------------------------
df = pd.read_csv("ration_shop_data.csv")
shops = df["Shop"].unique()

# ------------------------------
# AI Prediction Function
# ------------------------------
def predict_stock(shop_df, days_ahead=7):
    shop_df = shop_df.groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    model = LinearRegression()
    model.fit(X, y)

    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + days_ahead)})
    future_preds = model.predict(future_days)

    return shop_df, future_days, future_preds

# ------------------------------
# Setup Log File
# ------------------------------
log_file = "prediction_logs.csv"
with open(log_file, "w") as f:
    f.write("Timestamp,Shop,DayAhead,PredictedStock,Note\n")

# ------------------------------
# Live Simulation with Shortages
# ------------------------------
print("\n🔄 Starting Live Dashboard Simulation with Logging & Shortages...")

for step in range(3):  # simulate 3 refreshes (shorter for demo)
    clear_output(wait=True)
    print(f"📡 Live Dashboard Update {step+1}")

    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    for shop in shops:
        shop_df = df[df["Shop"] == shop].copy()

        # 🔥 Random shortage
        if random.random() < 0.3:
            drop_amount = random.randint(50, 200)
            affected_idx = shop_df.sample(1).index
            shop_df.loc[affected_idx, "Remaining"] -= drop_amount
            shop_df.loc[affected_idx, "Remaining"] = shop_df.loc[affected_idx, "Remaining"].clip(lower=0)

!pip install reportlab

# AI Ration Shop System with Live Simulation + Logging + Auto PDF Report

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np
import time, datetime, random, os
from IPython.display import clear_output
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

# ------------------------------
# Load Dataset
# ------------------------------
df = pd.read_csv("ration_shop_data.csv")
shops = df["Shop"].unique()

# ------------------------------
# AI Prediction Function
# ------------------------------
def predict_stock(shop_df, days_ahead=7):
    shop_df = shop_df.groupby("Date")["Remaining"].sum().reset_index()
    shop_df["Day"] = np.arange(len(shop_df))

    X = shop_df[["Day"]]
    y = shop_df["Remaining"]

    model = LinearRegression()
    model.fit(X, y)

    future_days = pd.DataFrame({"Day": np.arange(len(shop_df), len(shop_df) + days_ahead)})
    future_preds = model.predict(future_days)

    return shop_df, future_days, future_preds

# ------------------------------
# Setup Log File
# ------------------------------
log_file = "prediction_logs.csv"
with open(log_file, "w") as f:
    f.write("Timestamp,Shop,DayAhead,PredictedStock,Note\n")

# ------------------------------
# Live Simulation with Shortages
# ------------------------------
print("\n🔄 Starting Live Dashboard Simulation with Logging & Shortages...")

for step in range(3):  # simulate 3 refreshes (shorter for demo)
    clear_output(wait=True)
    print(f"📡 Live Dashboard Update {step+1}")

    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    for shop in shops:
        shop_df = df[df["Shop"] == shop].copy()

        # 🔥 Random shortage
        if random.random() < 0.3:
            drop_amount = random.randint(50, 200)
            affected_idx = shop_df.sample(1).index
            shop_df.loc[affected_idx, "Remaining"] -= drop_amount
            shop_df.loc[affected_idx, "Remaining"] = shop_df.loc[affected_idx, "Remaining"].clip(lower=0)
            shortage_note = f"⚠️ Shortage (-{drop_amount})"
        else:
            shortage_note = "Normal"

        # Prediction
        shop_df, future_days, future_preds = predict_stock(shop_df)

        # Log predictions
        with open(log_file, "a") as f:
            for d, p in enumerate(future_preds, 1):
                f.write(f"{now},{shop},+{d},{p:.2f},{shortage_note}\n")

    time.sleep(2)

print("\n✅ Simulation Finished! Logs saved to 'prediction_logs.csv'")

# ------------------------------
# Generate PDF Report
# ------------------------------
def generate_report():
    report_name = "RationShop_Report.pdf"
    doc = SimpleDocTemplate(report_name, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []

    # Title Page
    story.append(Paragraph("<b>AI-Based Ration Shop Stock Report</b>", styles['Title']))
    story.append(Spacer(1, 20))
    story.append(Paragraph(f"Generated on: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal']))
    story.append(Spacer(1, 40))

    # Shop-wise Graphs
    for shop in shops:
        shop_df = df[df["Shop"] == shop].copy()
        shop_df, future_days, future_preds = predict_stock(shop_df)

        # Plot
        plt.figure(figsize=(6,4))
        plt.plot(shop_df["Day"], shop_df["Remaining"], marker="o", label="Actual Stock")
        plt.plot(future_days["Day"], future_preds, marker="x", linestyle="--", color="red", label="Predicted Stock")
        plt.title(f"{shop} Stock Forecast")
        plt.xlabel("Day")
        plt.ylabel("Stock Remaining")
        plt.legend()
        img_path = f"{shop}_forecast.png"
        plt.savefig(img_path, bbox_inches="tight")
        plt.close()

        # Add to PDF
        story.append(Paragraph(f"<b>{shop} Stock Forecast</b>", styles['Heading2']))
        story.append(Image(img_path, width=400, height=250))
        story.append(Spacer(1, 20))

    # Add Logged Shortages Table
    log_df = pd.read_csv(log_file)
    story.append(Paragraph("<b>Prediction Logs & Shortages</b>", styles['Heading2']))

    table_data = [log_df.columns.tolist()] + log_df.head(15).values.tolist()  # only first 15 rows
    table = Table(table_data, repeatRows=1)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.grey),
        ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
        ('ALIGN',(0,0),(-1,-1),'CENTER'),
        ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
        ('GRID', (0,0), (-1,-1), 0.5, colors.black),
    ]))
    story.append(table)

    doc.build(story)
    print(f"\n📑 Report Generated: {report_name}")

# Call report generator
generate_report()